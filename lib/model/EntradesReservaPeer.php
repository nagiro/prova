<?php

require 'lib/model/om/BaseEntradesReservaPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'entrades_reserva' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 04/27/11 14:57:30
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class EntradesReservaPeer extends BaseEntradesReservaPeer {
        
    const ESTAT_ENTRADA_CONFIRMADA = 10;
    const ESTAT_ENTRADA_ANULADA = 20;
    const ESTAT_ENTRADA_EN_ESPERA = 30;


    /**
     * @return -1 (OH incorrecte)
     * @return -2 (OA incorrecte)
     * @return -3 (OEP incorrecte)
     * @return -4 (Repe)
     * @return -5 (Exhaurides)
     * @return -6 (Error TPV)
     * @return 1 (Reserva OK)
     * @return 2 (Compra OK)
     * */
    static public function setCompraEntrada($IDH, $IDU, $NEntrades, $Descompte, $COMPRA = false)
    {
            
        //Carreguem l'activitat en qüestió per carregar les dades.
        $OH = HorarisPeer::retrieveByPK($IDH);
        if(!($OH instanceof Horaris)) return -1;
        $IDA = $OH->getActivitatsActivitatid(); 
        
        $OA = ActivitatsPeer::retrieveByPK($IDA);        
        if(!($OA instanceof Activitats)) return -2;
        
        $OEP = EntradesPreusPeer::getByActivitatOHorari($IDA, $IDH);
        if(!($OEP instanceof EntradesPreus)) return -3; //HORARI_INEXISTENT
        
        
        //Tenim un horari carregat i una activitat. 
        $idS = $OA->getSiteid();
        
        $HaComprat = EntradesReservaPeer::ExisteixenEntradesComprades($IDU, $IDH);
        $PlacesLliures = EntradesReservaPeer::countEntradesActivitatConf($IDH);
        $Tipus = ($COMPRA)?EntradesPreusPeer::TIPUS_VENTA:EntradesPreusPeer::TIPUS_RESERVA;                        
                            
        if($HaComprat) return -4; //ENTRADA_REPE
        if(($PlacesLliures - $this->NEntrades) <= 0) return -5; //NO_QUEDEN_PROU_ENTRADES                                                      
                                                        
        //Generem la nova compra o reserva
        $OER = EntradesReservaPeer::initialize( $idS , '' , 0 , $IDA , $IDH , $IDU , $NEntrades , $Tipus , $Descompte )->getObject();
            
        //Si és reserva                    
        if( $Tipus == EntradesPreusPeer::TIPUS_RESERVA ){
        
            $OER->setEstat(EntradesReservaPeer::ESTAT_ENTRADA_CONFIRMADA);                                            
            $OER->save();
         
        } elseif($Tipus == EntradesPreusPeer::TIPUS_VENTA) {
        
            $OER->setEstat(EntradesReservaPeer::ESTAT_ENTRADA_EN_ESPERA);
            $OER->save();            
                                            
        }
               
        UsuarisPeer::addSite($IDU,$idS);
        return $OER;                                                                         
        
    } 
    
    static public function getCriteriaActiu($C)
    {
        $C->add(self::ACTIU, true);
        return $C;
    }

    static public function selectEstats(){
        return array(
            self::ESTAT_ENTRADA_EN_ESPERA => 'En espera',            
            self::ESTAT_ENTRADA_CONFIRMADA => 'Confirmada',
            self::ESTAT_ENTRADA_ANULADA => 'Anulada',        
        );
        
    }

	static public function initialize( $idS , $url_ajax_usuaris, $idER = 0, $idA = 0, $idH = 0 , $idU = 0 , $quantitat = 0 , $tipus = EntradesPreusPeer::TIPUS_RESERVA , $Descompte )
	{				
        $OER = self::retrieveByPKs($idER);	
        
		if(!($OER instanceof EntradesReserva)):
			$OER = new EntradesReserva();
            $OER->setEntradesPreusActivitatId(($idA == 0)?null:$idA);
            $OER->setEntradesPreusHorariId(($idH == 0)?null:$idH);
			$OER->setUsuariid(($idU == 0)?null:$idU);
            $OER->setNomReserva("");
            $OER->setQuantitat($quantitat);			
			$OER->setEstat(self::ESTAT_ENTRADA_EN_ESPERA);
            $OER->setActiu(true);
            $OER->setTipus($tipus);
            $OER->setDescompte($Descompte);
            $OER->setSiteid($idS);
			$OER->setData(date('Y-m-d H:i',time()));
		endif; 		
		
        return new EntradesReservaForm($OER,array('ajax'=>$url_ajax_usuaris));
	}

    /**
     * Retorna per quins horaris, l'usuari ha comprat entrades
     * */
    static public function h_getEntradesUsuariArray($idU){
        $RET = array();
        
        foreach(self::getEntradesUsuari($idU) as $OER):
            $RET[$OER->getEntradesPreusHorariId()] = $OER->getIdentrada();
        endforeach;
        
        return $RET;
    }

    /**
     * Retorna per quins horaris, l'usuari ha comprat entrades
     * */
    static public function h_getEntradesActivitatUsuariArray($idU){
        $RET = array();
        
        foreach(self::getEntradesUsuari($idU) as $OER):
            $RET[$OER->getIdentrada()] = $OER->getIdentrada();
        endforeach;
        
        return $RET;
    }    

    /**
     * Retorna les entrades guardades per a un usuari en concret.
     * @param $idU Usuariid()
     * @return Llistat d'entrades
     * */
    static public function getEntradesUsuari($idU){
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);        
        $C->add(self::USUARI_ID, $idU);
        
        $C->addDescendingOrderByColumn(self::IDENTRADA);
        return self::doSelect($C);        
    }

    /**
     * Retorna les entrades guardades per a una activitat en concret.
     * @param $idA Activitatid()
     * @return Llistat d'entrades
     * */
    static public function getEntradesActivitat($idA){
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        
        $C->add(self::ACTIVITATS_ID, $idA);
        $C->addDescendingOrderByColumn(self::ENTRADES_RESERVA_ID);
        return self::doSelect($C);        
    }


    /**
     * Diu quantes entrades s'han confirmat d'una activitat.
     * @param $idA Activitat id     
     * @return Int Quantes entrades s'han trobat.
     * */
/*    static public function countEntradesActivitatConf($idA,$idH = 0){
        $RET = 0;
        
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        $C->add( self::ENTRADES_PREUS_ACTIVITAT_ID , $idA );
        if($idH > 0) $C->add( self::ENTRADES_PREUS_HORARI_ID , $idH ); 
        $C->add( self::ESTAT , self::ESTAT_ENTRADA_CONFIRMADA);
        
        foreach(self::doSelect($C) as $OE):            
            $RET += $OE->getQuantes();
        endforeach;
        
        return $RET;
    }
*/

    /**
     * Places lliures a un horari determinat
     * @param $idH Horariid     
     * @return Int Quantes entrades queden lliures.
     * */
    static public function countEntradesActivitatConf($idH){
        $RET = 0;
        
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        $C->add( self::ENTRADES_PREUS_HORARI_ID , $idH );         
        $C->add( self::ESTAT , self::ESTAT_ENTRADA_CONFIRMADA);
        
        foreach(self::doSelect($C) as $OE):
            $RET += $OE->getQuantes();
        endforeach;
        
        $OEP = EntradesPreusPeer::getByActivitatOHorari(0,$idH);
        return $OEP->getPlaces() - $RET;
                
    }


    /**
     * L'usuari ja ha comprat entrades per aquest dia en concret.
     * @param $idU Usuari ID
     * @param $idH Horari ID
     * @return Int Quantes entrades s'han trobat.
     * */
    static public function ExisteixenEntradesComprades($idU,$idH)
    {
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        
        $C->add(self::USUARI_ID, $idU);
        $C->add(self::ENTRADES_PREUS_HORARI_ID, $idH);
        $C->add(self::ESTAT,self::ESTAT_ENTRADA_ANULADA, CRITERIA::NOT_EQUAL);
        return (self::doCount($C)>0);        
    }


} // EntradesReservaPeer
