<?php

require 'lib/model/om/BaseLlistesEmailsPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'llistes_emails' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/25/11 12:18:25
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class LlistesEmailsPeer extends BaseLlistesEmailsPeer {

    static public function getAllBaixes($idS){
        $C = new Criteria();
        $C->add(self::ACTIU, false);
        
        return self::doSelect($C);
    }

    static public function baixaGeneral($idE,$idS){                                
        $C = new Criteria();
        $C->add(self::IDEMAIL, $idE);
        $C->add(self::SITE_ID, $idS);
        $O = self::doSelectOne($C);
        $O->setBaixa(date('Y-m-d',time()));
        $O->setActiu(false);               
        $O->save();         
    }
                

    static public function cercaMail($email,$idS){
        $C = new Criteria();
        $C->add(self::EMAIL, $email);
        $C->add(self::SITE_ID, $idS);
        
        return self::doSelect($C);        
    }
    
    static public function getLlistes($email){
        $C = new Criteria();
        $C->add(self::EMAIL, $email);
        $C->addJoin(self::IDEMAIL, LlistesLlistesEmailsPeer::IDEMAIL);
        $C->addJoin(LlistesLlistesEmailsPeer::IDLLISTA, LlistesLlistesPeer::IDLLISTA);
        
        return LlistesLlistesPeer::doSelect($C);
    }
    
    static public function cercaMailDNI($dni,$idS){
        
        $MAILS = array();
        $C = new Criteria();
        $C = UsuarisPeer::CriteriaCerca($dni,$C);
        foreach(UsuarisPeer::doSelect($C) as $OU):
            $MAILS[] = $OU->getEmail();
        endforeach;        
                
        $C = new Criteria();
        $C->add(self::EMAIL, $MAILS , CRITERIA::IN);
        $C->add(self::SITE_ID, $idS);
        $C->add(self::ACTIU, true);
                        
        return self::doSelect($C);    
        
    }

    static public function getUsuari($email){
        $C = new Criteria();
        $C->add(UsuarisPeer::EMAIL, $email);
        $C->add(UsuarisPeer::ACTIU, true);
                                
        return UsuarisPeer::doSelect($C);
    }

    static public function isActiuEmailALlista($idE,$idL){
        $C = new Criteria();
        $C->add(LlistesLlistesEmailsPeer::IDEMAIL, $idE);
        $C->add(LlistesLlistesEmailsPeer::IDLLISTA, $idL);
        
        $O = LlistesLlistesEmailsPeer::doSelectOne($C);
        
        return $O->getActiu();
    }

} // LlistesEmailsPeer
