<?php

require 'lib/model/om/BaseEntradesPreusPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'entrades_preus' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 11/03/11 11:52:23
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class EntradesPreusPeer extends BaseEntradesPreusPeer {

    const MODE_HORARI = 0;
    const MODE_ACTIVITAT = 1;
        
    const TIPUS_DESACTIVAT = 0;
    const TIPUS_RESERVA = 1;
    const TIPUS_VENTA = 2;    
    
    /**
     * Inicialitzem el formulari de EntradesPreus     
     * */
    static public function initialize($idS = 1, $idH = 0, $idA = 0)
    {
        $OEP = self::retrieveByPK($idH,$idA);
        if(!($OEP instanceof EntradesPreus)):
            $OEP = new EntradesPreus();            
            $OEP->setPreu(0);
            $OEP->setPlaces(0);
            $OEP->setDescomptes(null);
            $OEP->setSiteId($idS);
            $OEP->setHorariId($idH);
            $OEP->setActivitatid($idA);
            $OEP->setActiu(false);
        endif;
        
        return new EntradesPreusForm($OEP,array('IDS'=>$idS,'IDH'=>$idH));    
            
    }
/*
    static public function getPreu($IDH,$NEntrades,$Descompte)
    {
        $OEP = self::getByActivitatOHorari(0,$IDH);
        if(!($OEP instanceof EntradesPreus)) return -1;
        //FALTA ACABAR-HO!!!                        
    }
*/
    static public function isEntradesByActivitat($idA){
        $C = new Criteria();
        $C->add(self::ACTIVITAT_ID, $idA);
        $C->add(self::ACTIU, true);
        return (self::doCount($C) > 0);
    }

    /**
     * Retorna tots els horaris que tenen actiu el tema de les entrades.
     * Esborrada perquè no es fa servir.  
     * */
/*    static public function getEntradesHorarisByActivitat($idA){
        
        $C = new Criteria();
        $C->add(self::ACTIVITAT_ID, $idA);
        $C->addJoin(self::HORARI_ID, HorarisPeer::HORARISID);
        $C->add(self::ACTIU, true);
        $C->add(self::ACTIVITAT_ID, self::HORARI_ID, CRITERIA::NOT_EQUAL); //Agafem els que només són horaris ( tenen activitat != horari )
        $C->add(HorarisPeer::ACTIU, true);
   
        return HorarisPeer::doSelect($C);
                
    }
*/
    /**
     * Ens retorna les condicions d'entrada segons l'activitat o horaris 
     * */
    static public function getByActivitatOHorari($idA = 0, $idH = 0){
        //Primer mirem si hi ha un preu per l'horari entrat.
            //si no hi ha cap preu per l'horari, entrem amb l'activitat
        
                
        $C = new Criteria();
        $C->add(self::HORARI_ID, $idH);
        $C->add(self::ACTIU, true);            
        $OEP = self::doSelectOne($C);
        
        if($OEP instanceof EntradesPreus):
            return $OEP;
        else:
            $C = new Criteria();
            $C->add(self::ACTIVITAT_ID, $idA);            
            $C->add(self::ACTIU, true);
            $OEP = self::doSelectOne($C);
            if($OEP instanceof EntradesPreu):
                return $OEP;
            else: 
                return null;
            endif;                        
        endif;                                  
        
    } 


    /**
     * Ens diu quin tipus de venta hi ha associada a aquesta activitat i/o horari en espeical. 
     * */
/*    static public function getTipusVenta($idA = 0, $idH = 0){
        $C = new Criteria();
        if($idH > 0) $C->add(self::HORARI_ID, $idH);
        if($idA > 0) $C->add(self::ACTIVITAT_ID, $idA);
        $C->add(self::ACTIU);
        
        $OEP = self::doSelectOne();
        if($OEP instanceof EntradesPreus) return $OEP->getTipus();
        else return self::TIPUS_DESACTIVAT;
    } 
*/

    /**
     * Retorna les activitats que tenen compra d'entrada.
     * */
    static public function getActivitatsAmbEntrades($idS, $P = 1)
    {
        $C = new Criteria();  
        $C->add(self::SITE_ID, $idS);      
        $C->addJoin( self::HORARI_ID , HorarisPeer::HORARISID );        
        $C->addDescendingOrderByColumn( Horarispeer::DIA );
        
        $pager = new sfPropelPager('EntradesPreus', 20);
        $pager->setCriteria($C);    
        $pager->setPage($P);
        $pager->init();    	                
        
        return $pager;                        
    }

    static public function getDescomptesArray( $idA, $idH, $ambPreu = false )
    {

        $OEP = self::retrieveByPK( $idH , $idA );        
        $RET = array();
    
        $RET[DescomptesPeer::CAP]  = 'Sense descompte';
        if($ambPreu) $RET[DescomptesPeer::CAP] .= ' ('.$OEP->getPreu().'€)';    
        
        //Si hem trobat el preu, mostrem els descomptes
        if($OEP instanceof EntradesPreus):
        
            foreach(explode('@',$OEP->getDescomptes()) as $IDD){
                $OD = DescomptesPeer::retrieveByPK($IDD);
                if($OD instanceof Descomptes):
                    $RET[$IDD]  = $OD->getDescripcio();
                    if($ambPreu) $RET[$IDD] .= ' ('.DescomptesPeer::getPreuAmbDescompte( $OEP->getPreu() , $IDD ).'€)';
                endif;        
            } 
                       
        endif;
        
        return $RET;
            
    }

} // EntradesPreusPeer