<?php

require 'lib/model/om/BaseSitesPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'sites' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/13/10 11:26:13
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class SitesPeer extends BaseSitesPeer {
    
    static public function getCriteriaActiu( $C )
    {
      $C->add(self::ACTIU,true);      
      return $C;
    }    
    
    static public function initialize( $idS )
    {
        $OO = self::retrieveByPK($idS);            
        if(!($OO instanceof Sites)):                                    		
        	$OO = new Sites();       
            $OO->setNom('');
            $OO->setActiu(true);     		            			    			    			        			
        endif;
         
       	return new SitesForm($OO,array('IDS'=>$idS));
    }

    static public function getSelect($has_new = true)
    {
        $RET = array();
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        if($has_new) $RET[''] = 'Nou site...';
        else $RET['0'] = 'Escull una entitat... ';
        foreach(self::doSelect($C) as $OS):
            $RET[$OS->getSiteId()] = $OS->getNom();
        endforeach;
        return $RET;
    }

    static public function getSelectUser($idU = 0)
    {
        $RET = array();
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);        
        $C = UsuarisPeer::getCriteriaActiu($idU);
        $C = UsuarisSitesPeer::getCriteriaActiu($C);
        $C->addJoin(self::SITE_ID, UsuarisSitesPeer::SITE_ID);
        $C->addJoin(UsuarisSitesPeer::USUARI_ID, UsuarisPeer::USUARIID);
        $C->add(UsuarisPeer::USUARIID,$idU);
        
        $RET['0'] = 'Escull una entitat...';
        foreach(self::doSelect($C) as $OS):
            $RET[$OS->getSiteId()] = $OS->getNom();
        endforeach;
        return $RET;
    }

    
    static public function getNom($idS)
    {
        $OS = self::retrieveByPK($idS);
        if($OS instanceof Sites):
            return $OS->getNom();
        else: 
            return "n/d";
        endif; 
    }
    
} // SitesPeer
