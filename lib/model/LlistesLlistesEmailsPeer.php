<?php

require 'lib/model/om/BaseLlistesLlistesEmailsPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'llistes_llistes_emails' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/25/11 13:08:49
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class LlistesLlistesEmailsPeer extends BaseLlistesLlistesEmailsPeer {

    static private function CriteriaEmailsFromLlistes($A_llistes,$all = false){
        $C = new Criteria();
        if(!$all) $C->add(self::ACTIU, true);
        $C->add(self::IDLLISTA, $A_llistes ,CRITERIA::IN);
        $C->addJoin(LlistesEmailsPeer::IDEMAIL, self::IDEMAIL);
        $C->add(LlistesEmailsPeer::ACTIU, true);    //Si està de baixa global, ho haurà d'informar a informatica
        $C->addGroupByColumn(self::IDEMAIL);
        $C->addAscendingOrderByColumn(LlistesEmailsPeer::EMAIL);
        return $C;        
    }

    static public function getEmailsFromLlistesAll($A_llistes){
        $C = self::CriteriaEmailsFromLlistes($A_llistes,false);        
        return LlistesEmailsPeer::doSelect($C);
    }

    static public function getEmailsFromLlistes( $A_llistes , $P ){
                
        $C = self::CriteriaEmailsFromLlistes($A_llistes,true);
                        
        $pager = new sfPropelPager('LlistesEmails', 50);
        $pager->setCriteria($C);
        $pager->setPage($P);
        $pager->init();    	
        
        return $pager;            
                                
    }

    static public function addEmails($emails, $idL, $idS){
                
        $RET = array('AFEGITS' => 0, 'ERRORS' => array());
                
        foreach(explode("\n",$emails) as $MAIL):
            $email = trim($MAIL);
            $C = new Criteria();
            $C->add(LlistesEmailsPeer::EMAIL, $email);
            $OM = LlistesEmailsPeer::doSelectOne($C);
            if(!($OM instanceof LlistesEmails)):            
                if(ValidaMail($email)):
                
                    //Creem el correu als mails generals
                    $OLE = new LlistesEmails();
                    $OLE->setEmail($email);
                    $OLE->setAlta(date('Y-m-d',time()));
                    $OLE->setActiu(true);
                    $OLE->setSiteid($idS);
                    $OLE->save();
                    
                    //Lliguem el mail general amb la llista
                    $OLLE = new LlistesLlistesEmails();
                    $OLLE->setIdllista($idL);
                    $OLLE->setIdemail($OLE->getIdemail());
                    $OLLE->setAlta(date('Y-m-d',time()));
                    $OLLE->setActiu(true);
                    $OLLE->setSiteid($idS);
                    $OLLE->save();                
                                                                                                              
                else: 
                    $RET['ERRORS'][] = trim($MAIL).' és invàlid. <br />';                    
                endif;
            else:
                if($OM->getActiu() == false):
                    $RET['ERRORS'][] = trim($MAIL).' està marcat com inactiu. Contacta amb informatica@casadecultura.org. <br />';
                else:    
                    $C = new Criteria();
                    $C->add(self::IDLLISTA, $idL);
                    $C->add(self::IDEMAIL, $OM->getIdemail());        
                    $OLLE = self::doSelectOne($C);
                    if(!($OLLE instanceof LlistesLlistesEmails)):
                        $OLLE = new LlistesLlistesEmails();
                        $OLLE->setIdllista($idL);
                        $OLLE->setIdemail($OM->getIdemail());
                        $OLLE->setAlta(date('Y-m-d',time()));
                        $OLLE->setActiu(true);
                        $OLLE->setSiteid($idS);
                        $OLLE->save();
                    else: 
                        $OLLE->setActiu(true);
                        $OLLE->save();
                    endif;                                                             
                endif;
            endif;
                                                
        endforeach; 
        
        return $RET;
        
    }
    
    //Farem la baixa
    static public function baixaEmail($idE, $idL){
        $C = new Criteria();                
        $C->add(self::IDLLISTA, $idL);
        $C->add(self::IDEMAIL, $idE);                        
        
        $O = self::doSelectOne($C);
        if($O instanceof LlistesLlistesEmails):        
            $act = !($O->getActiu());                        
            $O->setActiu($act);
            if($O->getActiu()) $O->setBaixa(null);
            else $O->setBaixa(date('Y-m-d',time()));
            $O->save();        
        endif;
                
    }    


} // LlistesLlistesEmailsPeer



function ValidaMail($pMail) {
    if (ereg("^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@+([_a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]{2,200}\.[a-zA-Z]{2,6}$", $pMail ) ) {
       return true;
    } else {
       return false;
    }
} 
